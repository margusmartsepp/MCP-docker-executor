[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-docker-executor"
version = "0.1.0"
description = "A Python-based Master Control Program (MCP) server that creates Linux Docker images with Python, Node.js, and C# runtimes"
authors = [
    {name = "Margus Martsepp", email = "margusmartsepp@gmail.com"},
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "mcp[cli]>=1.14.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "docker>=6.1.0",
    "pydantic>=2.11.7",
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    "ruff>=0.1.0",
    "pyright>=1.1.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
mcp-docker-executor = "mcp_docker_executor.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_docker_executor"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ERA", # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PLC0415", # import should be at top-level
    "PLW0603", # global statement discouraged
    "ARG001", # unused function argument
    "F841", # local variable assigned but never used
    "RUF059", # unpacked variable never used
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["PLR2004", "S101", "PLC0415", "SIM105"]

[tool.ruff.lint.isort]
known-first-party = ["mcp_docker_executor"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.pyright]
pythonVersion = "3.11"
include = ["src", "tests"]
exclude = ["**/__pycache__"]
reportMissingImports = true
reportMissingTypeStubs = false
reportGeneralTypeIssues = "warning"
# Ignore warnings from external libraries without type stubs
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"
reportUnknownParameterType = "none"
reportUnknownLambdaType = "none"
reportMissingParameterType = "none"
reportMissingTypeArgument = "none"
reportOptionalMemberAccess = "none"
reportOptionalCall = "none"
reportOptionalIterable = "none"
reportOptionalContextManager = "none"
reportOptionalOperand = "none"
reportTypedDictNotRequiredAccess = "warning"
reportPrivateImportUsage = "warning"
reportConstantRedefinition = "warning"
reportIncompatibleMethodOverride = "warning"
reportIncompatibleVariableOverride = "warning"
reportInconsistentConstructor = "warning"
reportOverlappingOverloads = "warning"
reportUninitializedInstanceVariable = "warning"
reportInvalidStringEscapeSequence = "warning"
reportInvalidTypeVarUse = "warning"
reportCallInDefaultInitializer = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportAssertAlwaysTrue = "warning"
reportSelfClsParameterName = "warning"
reportImplicitStringConcatenation = "warning"
reportInvalidStubStatement = "warning"
reportIncompleteStub = "warning"
reportUnsupportedDunderAll = "warning"
reportUnusedCoroutine = "warning"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "e2e: marks tests as end-to-end tests (deselect with '-m \"not e2e\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "docker: marks tests that require Docker (deselect with '-m \"not docker\"')",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/mcp_docker_executor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
