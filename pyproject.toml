[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[project]
name = "mcp-docker-executor"
dynamic = ["version"]
description = "A Python-based Master Control Program (MCP) server that creates Linux Docker images with Python, Node.js, and C# runtimes for LLM code execution"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Margus Martsepp", email = "margusmartsepp@gmail.com"},
]
maintainers = [
    {name = "Margus Martsepp", email = "margusmartsepp@gmail.com"},
]
keywords = ["mcp", "docker", "llm", "code-execution", "python", "nodejs", "csharp", "automation"]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    "mcp[cli]>=1.14.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "docker>=6.1.0",
    "pydantic>=2.11.7",
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.6.1",
    "pytest-mock>=3.11.0",
    "ruff>=0.8.5",
    "pyright>=1.1.400",
    "pre-commit>=3.0.0",
    "anyio>=4.5.0",
    "trio>=0.26.2",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material[imaging]>=9.5.45",
    "mkdocstrings-python>=1.12.2",
]

[project.scripts]
mcp-docker-executor = "mcp_docker_executor.cli:main"

[project.urls]
Homepage = "https://github.com/margusmartsepp/MCP-docker-executor"
Repository = "https://github.com/margusmartsepp/MCP-docker-executor"
Issues = "https://github.com/margusmartsepp/MCP-docker-executor/issues"
Documentation = "https://github.com/margusmartsepp/MCP-docker-executor#readme"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_docker_executor"]

[tool.uv]
default-groups = ["dev"]
required-version = ">=0.7.2"

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.6.1",
    "pytest-mock>=3.11.0",
    "ruff>=0.8.5",
    "pyright>=1.1.400",
    "pre-commit>=3.0.0",
    "anyio>=4.5.0",
    "trio>=0.26.2",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material[imaging]>=9.5.45",
    "mkdocstrings-python>=1.12.2",
]

[tool.pyright]
typeCheckingMode = "basic"
include = ["src", "tests", "examples"]
venvPath = "."
venv = ".venv"
reportMissingTypeStubs = false
reportGeneralTypeIssues = "warning"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"
reportUnknownParameterType = "none"
reportUnknownLambdaType = "none"
reportMissingParameterType = "none"
reportMissingTypeArgument = "none"
reportOptionalMemberAccess = "none"
reportOptionalCall = "none"
reportOptionalIterable = "none"
reportOptionalContextManager = "none"
reportOptionalOperand = "none"
executionEnvironments = [
    {root = "tests", reportUnusedFunction = false, reportPrivateUsage = false},
    {root = "examples", reportUnusedFunction = false},
]

[tool.ruff]
line-length = 120
target-version = "py311"
extend-exclude = ["README.md"]

[tool.ruff.lint]
select = [
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "E",     # pycodestyle
    "F",     # pyflakes
    "I",     # isort
    "PERF",  # Perflint
    "PL",    # Pylint
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "RUF",   # ruff-specific rules
]
ignore = [
    "PERF203",  # loop with constant length
    "PLC0415",  # import should be at top-level
    "PLR0402",  # consider using from import
    "PLR0913",  # too many arguments
    "PLR0912",  # too many branches
    "PLR0915",  # too many statements
    "PLR2004",  # magic value used in comparison
    "PLW0603",  # global statement discouraged
    "ARG001",   # unused function argument
    "F841",     # local variable assigned but never used
    "RUF059",   # unpacked variable never used
    "SIM105",   # use contextlib.suppress
]
mccabe.max-complexity = 35  # Default is 10

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["PLR2004", "S101", "PLC0415", "SIM105", "ARG001"]
"examples/**/*.py" = ["PLR2004", "S101", "PLC0415"]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["bytes", "float", "int", "str"]
max-args = 23         # Default is 5
max-branches = 23     # Default is 12
max-returns = 13      # Default is 6
max-statements = 102  # Default is 50

[tool.pytest.ini_options]
log_cli = true
xfail_strict = true
addopts = """
    --color=yes
    --capture=fd
    --numprocesses auto
"""
testpaths = ["tests"]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "e2e: marks tests as end-to-end tests (deselect with '-m \"not e2e\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "docker: marks tests that require Docker (deselect with '-m \"not docker\"')",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning:docker",
    "ignore::DeprecationWarning:fastapi",
]

[tool.coverage.run]
source = ["src/mcp_docker_executor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.markdown.lint]
default = true
MD004 = false  # ul-style - Unordered list style
MD007.indent = 2  # ul-indent - Unordered list indentation
MD013 = false  # line-length - Line length
MD029 = false  # ol-prefix - Ordered list item prefix
MD033 = false  # no-inline-html - Inline HTML
MD041 = false  # first-line-heading/first-line-h1
MD059 = false  # descriptive-link-text
